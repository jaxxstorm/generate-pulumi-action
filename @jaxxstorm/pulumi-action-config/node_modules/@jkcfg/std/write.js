/**
 * @module std
 */
import { __std } from './internal/__std_generated';
import { flatbuffers } from './internal/flatbuffers';
/* we re-define Format from the generated __std.Format to document it */
export var Format;
(function (Format) {
    Format[Format["FromExtension"] = 0] = "FromExtension";
    Format[Format["JSON"] = 1] = "JSON";
    Format[Format["YAML"] = 2] = "YAML";
    Format[Format["Raw"] = 3] = "Raw";
    Format[Format["YAMLStream"] = 4] = "YAMLStream";
    Format[Format["JSONStream"] = 5] = "JSONStream";
    Format[Format["HCL"] = 6] = "HCL";
})(Format || (Format = {}));
export function write(value, path = '', { format = Format.FromExtension, indent = 2, overwrite = true } = {}) {
    if (value === undefined) {
        throw TypeError('cannot write undefined value');
    }
    const builder = new flatbuffers.Builder(1024);
    const str = (format === Format.Raw) ? value.toString() : JSON.stringify(value);
    const strOff = builder.createString(str);
    const pathOff = builder.createString(path);
    __std.WriteArgs.startWriteArgs(builder);
    __std.WriteArgs.addValue(builder, strOff);
    __std.WriteArgs.addPath(builder, pathOff);
    __std.WriteArgs.addFormat(builder, format);
    __std.WriteArgs.addIndent(builder, indent);
    __std.WriteArgs.addOverwrite(builder, overwrite);
    const args = __std.WriteArgs.endWriteArgs(builder);
    __std.Message.startMessage(builder);
    __std.Message.addArgsType(builder, __std.Args.WriteArgs);
    __std.Message.addArgs(builder, args);
    const message = __std.Message.endMessage(builder);
    builder.finish(message);
    V8Worker2.send(builder.asArrayBuffer());
}
