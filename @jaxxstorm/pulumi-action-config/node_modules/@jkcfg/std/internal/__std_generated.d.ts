import { flatbuffers } from "./flatbuffers";
/**
 * @enum
 */
export declare namespace __std {
    enum DeferredRetval {
        NONE = 0,
        Deferred = 1,
        Error = 2
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum FulfilmentValue {
        NONE = 0,
        Data = 1,
        EndOfStream = 2,
        Error = 3
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum FileSystemRetval {
        NONE = 0,
        FileInfo = 1,
        Directory = 2,
        Error = 3
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum Format {
        FromExtension = 0,
        JSON = 1,
        YAML = 2,
        Raw = 3,
        YAMLStream = 4,
        JSONStream = 5,
        HCL = 6
    }
}
/**
 * Encoding specifies the requested form of the contents to read;
 * either just the raw bytes, or as a UTF-16 string. Distinguishing
 * String (a UTF16-encoded string) is desirable because JavaScript
 * natively supports UTF-16, so if you want to be able
 * to decode a string value conveniently, it is best to ship it as
 * UTF-16. Similarly, JSON is there as a means of sending structured
 * data, e.g., YAML, in a way that JavaScript can digest easily.
 *
 * @enum
 */
export declare namespace __std {
    enum Encoding {
        Bytes = 0,
        String = 1,
        JSON = 2
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum ParamType {
        Boolean = 0,
        Number = 1,
        String = 2,
        Object = 3
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum ParamRetval {
        NONE = 0,
        ParamValue = 1,
        Error = 2
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum ParseUnparseRetval {
        NONE = 0,
        ParseUnparseData = 1,
        Error = 2
    }
}
/**
 * @enum
 */
export declare namespace __std {
    enum Args {
        NONE = 0,
        WriteArgs = 1,
        ReadArgs = 2,
        ParseArgs = 3,
        UnparseArgs = 4,
        CancelArgs = 5,
        FileInfoArgs = 6,
        ListArgs = 7,
        ParamArgs = 8
    }
}
/**
 * Error encodes an error either in accepting a request, or in fulfilling it (in deferreds).
 *
 * @constructor
 */
export declare namespace __std {
    class Error {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns Error
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Error;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param Error= obj
         * @returns Error
         */
        static getRootAsError(bb: flatbuffers.ByteBuffer, obj?: Error): Error;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        message(): string | null;
        message(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startError(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset messageOffset
         */
        static addMessage(builder: flatbuffers.Builder, messageOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endError(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * CancelArgs encodes a message cancelling a deferred response.
 *
 * @constructor
 */
export declare namespace __std {
    class CancelArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns CancelArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): CancelArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param CancelArgs= obj
         * @returns CancelArgs
         */
        static getRootAsCancelArgs(bb: flatbuffers.ByteBuffer, obj?: CancelArgs): CancelArgs;
        /**
         * @returns flatbuffers.Long
         */
        serial(): flatbuffers.Long;
        /**
         * @param flatbuffers.Builder builder
         */
        static startCancelArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Long serial
         */
        static addSerial(builder: flatbuffers.Builder, serial: flatbuffers.Long): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endCancelArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * Deferred encodes a serial number, standing in for an result or results to be fulfilled later.
 *
 * @constructor
 */
export declare namespace __std {
    class Deferred {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns Deferred
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Deferred;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param Deferred= obj
         * @returns Deferred
         */
        static getRootAsDeferred(bb: flatbuffers.ByteBuffer, obj?: Deferred): Deferred;
        /**
         * @returns flatbuffers.Long
         */
        serial(): flatbuffers.Long;
        /**
         * @param flatbuffers.Builder builder
         */
        static startDeferred(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Long serial
         */
        static addSerial(builder: flatbuffers.Builder, serial: flatbuffers.Long): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endDeferred(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * Response encodes the _synchronous_ response to a message expecting a deferred value or values.
 *
 * @constructor
 */
export declare namespace __std {
    class DeferredResponse {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns DeferredResponse
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): DeferredResponse;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param DeferredResponse= obj
         * @returns DeferredResponse
         */
        static getRootAsDeferredResponse(bb: flatbuffers.ByteBuffer, obj?: DeferredResponse): DeferredResponse;
        /**
         * @returns __std.DeferredRetval
         */
        retvalType(): __std.DeferredRetval;
        /**
         * @param flatbuffers.Table obj
         * @returns ?flatbuffers.Table
         */
        retval<T extends flatbuffers.Table>(obj: T): T | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startDeferredResponse(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.DeferredRetval retvalType
         */
        static addRetvalType(builder: flatbuffers.Builder, retvalType: __std.DeferredRetval): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset retvalOffset
         */
        static addRetval(builder: flatbuffers.Builder, retvalOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endDeferredResponse(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * Data is data sent as (possibly partial) fulfilment of a deferred result.
 *
 * @constructor
 */
export declare namespace __std {
    class Data {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns Data
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Data;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param Data= obj
         * @returns Data
         */
        static getRootAsData(bb: flatbuffers.ByteBuffer, obj?: Data): Data;
        /**
         * @param number index
         * @returns number
         */
        bytes(index: number): number | null;
        /**
         * @returns number
         */
        bytesLength(): number;
        /**
         * @returns Uint8Array
         */
        bytesArray(): Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startData(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset bytesOffset
         */
        static addBytes(builder: flatbuffers.Builder, bytesOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param Array.<number> data
         * @returns flatbuffers.Offset
         */
        static createBytesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
        /**
         * @param flatbuffers.Builder builder
         * @param number numElems
         */
        static startBytesVector(builder: flatbuffers.Builder, numElems: number): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endData(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * EndOfStream signals that there will be no more data.
 *
 * @constructor
 */
export declare namespace __std {
    class EndOfStream {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns EndOfStream
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): EndOfStream;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param EndOfStream= obj
         * @returns EndOfStream
         */
        static getRootAsEndOfStream(bb: flatbuffers.ByteBuffer, obj?: EndOfStream): EndOfStream;
        /**
         * @param flatbuffers.Builder builder
         */
        static startEndOfStream(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endEndOfStream(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * Resolution represents the _asynchronous_ fulfilment of a deferred value (possibly one of many values).
 *
 * @constructor
 */
export declare namespace __std {
    class Fulfilment {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns Fulfilment
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Fulfilment;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param Fulfilment= obj
         * @returns Fulfilment
         */
        static getRootAsFulfilment(bb: flatbuffers.ByteBuffer, obj?: Fulfilment): Fulfilment;
        /**
         * @returns flatbuffers.Long
         */
        serial(): flatbuffers.Long;
        /**
         * @returns __std.FulfilmentValue
         */
        valueType(): __std.FulfilmentValue;
        /**
         * @param flatbuffers.Table obj
         * @returns ?flatbuffers.Table
         */
        value<T extends flatbuffers.Table>(obj: T): T | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startFulfilment(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Long serial
         */
        static addSerial(builder: flatbuffers.Builder, serial: flatbuffers.Long): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.FulfilmentValue valueType
         */
        static addValueType(builder: flatbuffers.Builder, valueType: __std.FulfilmentValue): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset valueOffset
         */
        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endFulfilment(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class FileInfo {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns FileInfo
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): FileInfo;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param FileInfo= obj
         * @returns FileInfo
         */
        static getRootAsFileInfo(bb: flatbuffers.ByteBuffer, obj?: FileInfo): FileInfo;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        name(): string | null;
        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @returns boolean
         */
        isdir(): boolean;
        /**
         * @param flatbuffers.Builder builder
         */
        static startFileInfo(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset nameOffset
         */
        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param boolean isdir
         */
        static addIsdir(builder: flatbuffers.Builder, isdir: boolean): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endFileInfo(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class Directory {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns Directory
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Directory;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param Directory= obj
         * @returns Directory
         */
        static getRootAsDirectory(bb: flatbuffers.ByteBuffer, obj?: Directory): Directory;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        name(): string | null;
        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param number index
         * @param __std.FileInfo= obj
         * @returns __std.FileInfo
         */
        files(index: number, obj?: __std.FileInfo): __std.FileInfo | null;
        /**
         * @returns number
         */
        filesLength(): number;
        /**
         * @param flatbuffers.Builder builder
         */
        static startDirectory(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset nameOffset
         */
        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset filesOffset
         */
        static addFiles(builder: flatbuffers.Builder, filesOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param Array.<flatbuffers.Offset> data
         * @returns flatbuffers.Offset
         */
        static createFilesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
        /**
         * @param flatbuffers.Builder builder
         * @param number numElems
         */
        static startFilesVector(builder: flatbuffers.Builder, numElems: number): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endDirectory(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class FileInfoArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns FileInfoArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): FileInfoArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param FileInfoArgs= obj
         * @returns FileInfoArgs
         */
        static getRootAsFileInfoArgs(bb: flatbuffers.ByteBuffer, obj?: FileInfoArgs): FileInfoArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        module(): string | null;
        module(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startFileInfoArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset moduleOffset
         */
        static addModule(builder: flatbuffers.Builder, moduleOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endFileInfoArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ListArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ListArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ListArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ListArgs= obj
         * @returns ListArgs
         */
        static getRootAsListArgs(bb: flatbuffers.ByteBuffer, obj?: ListArgs): ListArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        module(): string | null;
        module(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startListArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset moduleOffset
         */
        static addModule(builder: flatbuffers.Builder, moduleOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endListArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class FileSystemResponse {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns FileSystemResponse
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): FileSystemResponse;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param FileSystemResponse= obj
         * @returns FileSystemResponse
         */
        static getRootAsFileSystemResponse(bb: flatbuffers.ByteBuffer, obj?: FileSystemResponse): FileSystemResponse;
        /**
         * @returns __std.FileSystemRetval
         */
        retvalType(): __std.FileSystemRetval;
        /**
         * @param flatbuffers.Table obj
         * @returns ?flatbuffers.Table
         */
        retval<T extends flatbuffers.Table>(obj: T): T | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startFileSystemResponse(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.FileSystemRetval retvalType
         */
        static addRetvalType(builder: flatbuffers.Builder, retvalType: __std.FileSystemRetval): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset retvalOffset
         */
        static addRetval(builder: flatbuffers.Builder, retvalOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endFileSystemResponse(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class WriteArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns WriteArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): WriteArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param WriteArgs= obj
         * @returns WriteArgs
         */
        static getRootAsWriteArgs(bb: flatbuffers.ByteBuffer, obj?: WriteArgs): WriteArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        value(): string | null;
        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @returns __std.Format
         */
        format(): __std.Format;
        /**
         * @returns number
         */
        indent(): number;
        /**
         * @returns boolean
         */
        overwrite(): boolean;
        /**
         * @param flatbuffers.Builder builder
         */
        static startWriteArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset valueOffset
         */
        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.Format format
         */
        static addFormat(builder: flatbuffers.Builder, format: __std.Format): void;
        /**
         * @param flatbuffers.Builder builder
         * @param number indent
         */
        static addIndent(builder: flatbuffers.Builder, indent: number): void;
        /**
         * @param flatbuffers.Builder builder
         * @param boolean overwrite
         */
        static addOverwrite(builder: flatbuffers.Builder, overwrite: boolean): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endWriteArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ReadArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ReadArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ReadArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ReadArgs= obj
         * @returns ReadArgs
         */
        static getRootAsReadArgs(bb: flatbuffers.ByteBuffer, obj?: ReadArgs): ReadArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @returns number
         */
        timeout(): number;
        /**
         * @returns __std.Encoding
         */
        encoding(): __std.Encoding;
        /**
         * @returns __std.Format
         */
        format(): __std.Format;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        module(): string | null;
        module(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startReadArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param number timeout
         */
        static addTimeout(builder: flatbuffers.Builder, timeout: number): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.Encoding encoding
         */
        static addEncoding(builder: flatbuffers.Builder, encoding: __std.Encoding): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.Format format
         */
        static addFormat(builder: flatbuffers.Builder, format: __std.Format): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset moduleOffset
         */
        static addModule(builder: flatbuffers.Builder, moduleOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endReadArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ParamArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ParamArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ParamArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ParamArgs= obj
         * @returns ParamArgs
         */
        static getRootAsParamArgs(bb: flatbuffers.ByteBuffer, obj?: ParamArgs): ParamArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        path(): string | null;
        path(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @returns __std.ParamType
         */
        type(): __std.ParamType;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        defaultValue(): string | null;
        defaultValue(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startParamArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset pathOffset
         */
        static addPath(builder: flatbuffers.Builder, pathOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.ParamType type
         */
        static addType(builder: flatbuffers.Builder, type: __std.ParamType): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset defaultValueOffset
         */
        static addDefaultValue(builder: flatbuffers.Builder, defaultValueOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endParamArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ParamValue {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ParamValue
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ParamValue;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ParamValue= obj
         * @returns ParamValue
         */
        static getRootAsParamValue(bb: flatbuffers.ByteBuffer, obj?: ParamValue): ParamValue;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        json(): string | null;
        json(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startParamValue(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset jsonOffset
         */
        static addJson(builder: flatbuffers.Builder, jsonOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endParamValue(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ParamResponse {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ParamResponse
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ParamResponse;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ParamResponse= obj
         * @returns ParamResponse
         */
        static getRootAsParamResponse(bb: flatbuffers.ByteBuffer, obj?: ParamResponse): ParamResponse;
        /**
         * @returns __std.ParamRetval
         */
        retvalType(): __std.ParamRetval;
        /**
         * @param flatbuffers.Table obj
         * @returns ?flatbuffers.Table
         */
        retval<T extends flatbuffers.Table>(obj: T): T | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startParamResponse(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.ParamRetval retvalType
         */
        static addRetvalType(builder: flatbuffers.Builder, retvalType: __std.ParamRetval): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset retvalOffset
         */
        static addRetval(builder: flatbuffers.Builder, retvalOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endParamResponse(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ParseArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ParseArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ParseArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ParseArgs= obj
         * @returns ParseArgs
         */
        static getRootAsParseArgs(bb: flatbuffers.ByteBuffer, obj?: ParseArgs): ParseArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        chars(): string | null;
        chars(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @returns __std.Format
         */
        format(): __std.Format;
        /**
         * @param flatbuffers.Builder builder
         */
        static startParseArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset charsOffset
         */
        static addChars(builder: flatbuffers.Builder, charsOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.Format format
         */
        static addFormat(builder: flatbuffers.Builder, format: __std.Format): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endParseArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ParseUnparseData {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ParseUnparseData
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ParseUnparseData;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ParseUnparseData= obj
         * @returns ParseUnparseData
         */
        static getRootAsParseUnparseData(bb: flatbuffers.ByteBuffer, obj?: ParseUnparseData): ParseUnparseData;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        data(): string | null;
        data(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startParseUnparseData(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset dataOffset
         */
        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endParseUnparseData(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class ParseUnparseResponse {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns ParseUnparseResponse
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): ParseUnparseResponse;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param ParseUnparseResponse= obj
         * @returns ParseUnparseResponse
         */
        static getRootAsParseUnparseResponse(bb: flatbuffers.ByteBuffer, obj?: ParseUnparseResponse): ParseUnparseResponse;
        /**
         * @returns __std.ParseUnparseRetval
         */
        retvalType(): __std.ParseUnparseRetval;
        /**
         * @param flatbuffers.Table obj
         * @returns ?flatbuffers.Table
         */
        retval<T extends flatbuffers.Table>(obj: T): T | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startParseUnparseResponse(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.ParseUnparseRetval retvalType
         */
        static addRetvalType(builder: flatbuffers.Builder, retvalType: __std.ParseUnparseRetval): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset retvalOffset
         */
        static addRetval(builder: flatbuffers.Builder, retvalOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endParseUnparseResponse(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class UnparseArgs {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns UnparseArgs
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): UnparseArgs;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param UnparseArgs= obj
         * @returns UnparseArgs
         */
        static getRootAsUnparseArgs(bb: flatbuffers.ByteBuffer, obj?: UnparseArgs): UnparseArgs;
        /**
         * @param flatbuffers.Encoding= optionalEncoding
         * @returns string|Uint8Array|null
         */
        object(): string | null;
        object(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
        /**
         * @returns __std.Format
         */
        format(): __std.Format;
        /**
         * @param flatbuffers.Builder builder
         */
        static startUnparseArgs(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset objectOffset
         */
        static addObject(builder: flatbuffers.Builder, objectOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.Format format
         */
        static addFormat(builder: flatbuffers.Builder, format: __std.Format): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endUnparseArgs(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
/**
 * @constructor
 */
export declare namespace __std {
    class Message {
        bb: flatbuffers.ByteBuffer | null;
        bb_pos: number;
        /**
         * @param number i
         * @param flatbuffers.ByteBuffer bb
         * @returns Message
         */
        __init(i: number, bb: flatbuffers.ByteBuffer): Message;
        /**
         * @param flatbuffers.ByteBuffer bb
         * @param Message= obj
         * @returns Message
         */
        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message;
        /**
         * @returns __std.Args
         */
        argsType(): __std.Args;
        /**
         * @param flatbuffers.Table obj
         * @returns ?flatbuffers.Table
         */
        args<T extends flatbuffers.Table>(obj: T): T | null;
        /**
         * @param flatbuffers.Builder builder
         */
        static startMessage(builder: flatbuffers.Builder): void;
        /**
         * @param flatbuffers.Builder builder
         * @param __std.Args argsType
         */
        static addArgsType(builder: flatbuffers.Builder, argsType: __std.Args): void;
        /**
         * @param flatbuffers.Builder builder
         * @param flatbuffers.Offset argsOffset
         */
        static addArgs(builder: flatbuffers.Builder, argsOffset: flatbuffers.Offset): void;
        /**
         * @param flatbuffers.Builder builder
         * @returns flatbuffers.Offset
         */
        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset;
    }
}
